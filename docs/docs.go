// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates the user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "parameters": [
                    {
                        "description": "User credentials (username and token)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_handlers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Создаёт новый аккаунт пользователя с уникальным именем и Telegram Bot Token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_handlers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные входные данные",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Имя пользователя уже существует",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создаёт новую задачу для отправки сообщений через Telegram.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Создать задачу",
                "parameters": [
                    {
                        "description": "Создание задачи",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_handlers.TaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Задача успешно создана",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные входные данные",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает детали задачи по её ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получить задачу",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID задачи",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Детали задачи",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/GoBlast_pkg_storage_models.Task"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Задача не найдена",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/GoBlast_pkg_response.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "GoBlast_pkg_response.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "GoBlast_pkg_storage_models.Task": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "internal_api_handlers.Content": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "caption": {
                    "type": "string"
                },
                "media_url": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "description": "text, photo, video, etc.",
                    "type": "string"
                }
            }
        },
        "internal_api_handlers.LoginInput": {
            "type": "object",
            "required": [
                "token",
                "username"
            ],
            "properties": {
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "internal_api_handlers.RegisterInput": {
            "type": "object",
            "required": [
                "token",
                "username"
            ],
            "properties": {
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "internal_api_handlers.TaskRequest": {
            "type": "object",
            "required": [
                "content",
                "recipients"
            ],
            "properties": {
                "content": {
                    "$ref": "#/definitions/internal_api_handlers.Content"
                },
                "priority": {
                    "description": "high, medium, low",
                    "type": "string"
                },
                "recipients": {
                    "description": "Telegram Chat IDs",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "schedule": {
                    "description": "RFC3339",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"Введите JWT токен в формате: Bearer {your-token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "GoBlast API",
	Description:      "API для управления рассылками с поддержкой JWT аутентификации.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
